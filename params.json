{
  "name": "Rosemary Sumitani",
  "tagline": "",
  "body": "# Estudos sobre Windows Installer e Wix\r\n\r\n## Open Source\r\n\r\nQuem não sabe, a Microsoft anda vem entrando nessa onda de código aberto e lançam alguns projetos como o Wix (gerador de instaladores com formato Windows Installer). \r\n\r\n## Wix\r\n\r\nO projeto foi inicialmente feito, pensando no Office. Hoje suporta qualquer customização.\r\n\r\nO Windows Installer contém uma biblioteca de instalação e gerenciamento de componentes, para conseguir controlar os arquivos instalados. O Wix entra na jogada para fazer a interface com esta biblioteca através de declarações XML.\r\n\r\n## Requerimento\r\n\r\nÉ um sistema Windows, não funciona no Linux. Quem sabe no futuro.\r\n\r\nAntes de começar, para conseguir trabalhar de forma razoável com os pacotes do Windows Installer, o mínimo requerido em sistemas operacionais é o Windows XP (com Service Pack 3), em termos de quantidade de usuários ativos com este sistema é misterioso (um exemplo interessante de requerimento mínimo em sistema operacional é o Android, eles tem um gráfico representando usuários ativos com o sistema deles). Voltando ao Windows, um dia foi o NT, outra o 2000 e agora é a vez do XP.\r\n\r\nNão quer dizer que um instalador simples não irá funcionar no Windows 2000, o requerimento serve para trabalhar com o sistema de patches do Windows Installer, chamados MSP. Consiste basicamente em um delta binário da versão antiga para a nova, economizando uns bons megas para serem baixados. Ainda existe conexão ruim neste mundo.\r\n\r\n## Como fazer?\r\n\r\nO tutorial do [site](https://www.firegiant.com/wix/tutorial/) da Firegiant é detalhada, para conseguir gerar um pequeno instalador e fazer algumas brincadeiras (instalar serviços e criar pastas no Arquivos de Programas) é bem explicativo seguindo o passo a passo, ensina inclusive a geração de patches.\r\n\r\n## Estruturas e nomes estranhos\r\n\r\nCom o XML, além das declarações e atributos, também é usado _GUID_ para cada componente (o componente é o arquivo que será instalado). Também é usado _GUID_ no identificador do produto e no identificador de atualização.\r\n\r\nOs componentes podem ser agrupados e também organizados por funcionalidade (_feature_).\r\n\r\nPodemos ter vários arquivos wxs, wxi, wxl para gerar um instalador.\r\n\r\nO TARGETDIR é onde estão os arquivos para montar o instalador, toma como ponto de partida o local do projeto que seria o SourceDir (isto é fixo).\r\n\r\nCaso queira criar uma pasta vazia, crie um componente vazio com a declaração de _CreateFolder_.\r\n\r\nSe for instalar os arquivos em uma estrutura fora do padrão dos programas do Windows, será necessário o uso do GUID para o componente de forma estática. Caso use as estruturas padrões (Arquivos de Programas, AppData, etc.) pode se usar o gerador automático. O Wix tem o Heat.exe que auxilia na coleta de componentes e gera os arquivos wxs automaticamente.\r\n\r\n## Versionamento\r\n\r\nAlém dos patches, apesar de existir a forma tradicional de atualizar os arquivos pelo _minor_, os próprios desenvolvedores sugerem o uso do _MajorVersion_, não que seja obrigatório incrementar os projetos pelo Major (1.0.0.0 para 2.0.0.0), mas sim atualizar o sistema como se o pacote antigo fosse um instalador totalmente diferente, assim o sistema detecta a versão nova, desinstala a antiga e instala a nova.\r\n\r\nIsto implica em ter um identificador de produto diferente para cada instalador gerado, porém o identificador de atualização sempre manterá o mesmo. Para gerar automaticamente o GUID para o identificador do produto somente insira um asterisco no campo _Id_.\r\n\r\n## Sem telas?\r\n\r\nUma vez com estas partes definidas é possível também utilizar um modelo para as telas de instalação, simples de serem chamadas (caso não tenha customizações em mente).\r\n\r\nA ideia é que se o instalador funciona silenciosamente bem, com a interface gráfica funcionará da mesma forma.\r\n\r\n## Propriedades e peculiaridades\r\n\r\nSe o instalador necessita de alguma informação na forma silenciosa, ela pode ser passada via linha de comando pela _Property_.\r\n\r\nInserir muitas _CustomAction_ (ações customizadas por DLL ou chamada de executável / script) dentro do instalador que modifiquem muito o sistema não é interessante, já que faz com que o sistema perca a capacidade de reverter estas ações automaticamente.\r\n\r\n[Documentação da versão 3.x](http://wixtoolset.org/documentation/)",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}